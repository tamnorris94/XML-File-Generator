# -*- coding: utf-8 -*-
"""XML_File_Generator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/140QPV2kRXLtAQ8L225fQkaTh2JWJD5jo
"""

from datetime import datetime, timedelta
import pandas as pd
import numpy as np
import xml.etree.ElementTree as xml
#from google.colab import files
import os
import shutil

def createXMLFile(df):
  '''
  function generates xml file
  '''
  foldername = datetime.now().strftime("%Y%m%d%H%M%S")
  os.mkdir(foldername)
  #xml file will have same name as created folder
  filename = foldername + '.xml'
  path = os.path.join(foldername, filename)
  bookCount = str(df.shape[0])
  #path = createFolder(foldername)
  root = xml.Element("Books")
  root.set('Count', bookCount)
  root.set('Date', datetime.now().strftime("%Y%m%d"))
  root.set('Filename', filename)
  root.set('Time', datetime.now().strftime("%H:%M:%S"))
  tree = xml.ElementTree(root)
  #cycle through rows in df and create xml child for each
  for row in df.itertuples():
    #Add the child dog elements to parent element 'Dogs'
    bookEl = xml.SubElement(root, 'Book')
    idEl = xml.SubElement(bookEl, 'id')
    titleEl = xml.SubElement(bookEl, 'title')
    pubYearEl = xml.SubElement(bookEl, 'publicationYear')
    authorEl = xml.SubElement(bookEl, 'author')
    #populate elements with
    idEl.text = str(row.id)
    titleEl.text = str(row.title)
    pubYearEl.text = str(row.publicationYear)
    authorEl.text = str(row.author)
	#call to function to create copies of images
    createCopyOfImage(str(row.id), foldername)
    #Get complete path to write xml file to
  #completePathName = os.path.join(foldername, filename)

  with open(path, 'wb') as file:
    tree.write(file,encoding='utf-8', xml_declaration=True)
	
  zipFileDirAndDownload(foldername)
  
def createCopyOfImage(id, path):
  '''
  creates a copy of image with bookid
  '''
  imageName = str(id + 'l0.jpg')
  pathToFile = os.path.join(path, imageName)
  shutil.copy('book1.jpg', pathToFile)
  
def zipFileDirAndDownload(path):
  '''
  Function to zip xml and image files
  '''
  print(path)
  zipFile = shutil.make_archive(path,"zip",path)
  #completePathName = os.path.join(path, zipFile) 
  #files.download(completePathName)

def main():
    df = pd.read_csv('books.csv')
    createXMLFile(df)

if __name__ == "__main__":
    main()